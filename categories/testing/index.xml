<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Blog | Friends of GO</title>
    <link>https://blog.friendsofgo.tech/categories/testing/</link>
    <description>Recent content in Testing on Blog | Friends of GO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-ES</language>
    <lastBuildDate>Mon, 21 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.friendsofgo.tech/categories/testing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Empezando con los tests automatizados en Go</title>
      <link>https://blog.friendsofgo.tech/posts/empezando-con-los-tests-automatizados-en-go/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.friendsofgo.tech/posts/empezando-con-los-tests-automatizados-en-go/</guid>
      <description>Empezar a escribir tests automatizados en Go es tan fácil que no requiere de librerías externas, como sí ocurre en otros lenguajes (véase PHPUnit o JUnit). En esta ocasión, el core de Go nos proporciona, tanto los paquetes necesarios (testing) como el binario para la ejecución de los mismos (go test).
Veamos un sencillo ejemplo:
package main import ( &amp;#34;strings&amp;#34; &amp;#34;testing&amp;#34; ) func IsSuperAnimal(animal string) bool { return strings.ToLower(animal) == &amp;#34;gopher&amp;#34; } func TestIsSuperAnimal(t *testing.</description>
    </item>
    
  </channel>
</rss>